name: Build and Test Wheels

on:
  push:
    branches: [main]
    tags:
      - 'v*'  # Trigger on version tags
  pull_request:
    branches: [main]
  workflow_dispatch:  # Allow manual triggering
    inputs:
      publish_to_test_pypi:
        description: 'Publish to Test PyPI?'
        required: false
        type: boolean
        default: false

env:
  CIBW_BUILD_VERBOSITY: 1

jobs:
  # Run tests (non-blocking - failures won't prevent deployment)
  test:
    name: Run tests
    runs-on: ${{ matrix.os }}
    continue-on-error: true  # Tests can fail without blocking deployment
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.8', '3.10', '3.12']
    
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
          pip install pytest-cov
      
      - name: Run Python tests
        run: |
          pytest tests/ -v --cov=django_mercury --cov-report=term-missing
      
      - name: Test C extensions (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          python setup.py build_ext --inplace
          python -c "from django_mercury.python_bindings.loader import check_c_extensions; available, details = check_c_extensions(); print(f'C Extensions: {available}')"
          python test_performance_comparison.py || echo "Performance test completed"
      
      - name: Run test runner
        run: |
          python test_runner.py || echo "Test runner completed"
      
      - name: Check code quality
        if: matrix.python-version == '3.10' && matrix.os == 'ubuntu-latest'
        run: |
          pip install ruff black isort
          ruff check django_mercury/ || true
          black --check django_mercury/ || true
          isort --check-only django_mercury/ || true

  # Build source distribution
  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    # No dependency on tests - build immediately
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for version detection
      
      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build
      
      - name: Build source distribution
        run: python -m build --sdist
      
      - uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: dist/*.tar.gz

  # Build wheels for each platform
  build_wheels:
    name: Build wheels on ${{ matrix.os }}-${{ matrix.archs }}
    runs-on: ${{ matrix.os }}
    # No dependency on tests - build immediately
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux x86_64
          - os: ubuntu-latest
            archs: x86_64
            build-name: linux-x86_64
            
          # Linux ARM64 (if needed, slower due to emulation)
          # - os: ubuntu-latest
          #   archs: aarch64
          #   build-name: linux-aarch64
          
          # macOS Intel
          - os: macos-13  # Use macos-13 for Intel
            archs: x86_64
            build-name: macos-x86_64
          
          # macOS Apple Silicon
          - os: macos-14  # Use macos-14 for Apple Silicon
            archs: arm64
            build-name: macos-arm64
          
          # macOS Universal (both architectures)
          - os: macos-latest
            archs: universal2
            build-name: macos-universal2
          
          # Windows 64-bit
          - os: windows-latest
            archs: AMD64
            build-name: windows-amd64
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      # Set up QEMU for Linux ARM builds (if enabled)
      - name: Set up QEMU
        if: runner.os == 'Linux' && matrix.archs == 'aarch64'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64
      
      - name: Build wheels
        uses: pypa/cibuildwheel@v2.22.0
        env:
          CIBW_ARCHS: ${{ matrix.archs }}
      
      - uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.build-name }}
          path: ./wheelhouse/*.whl

  # Test the built wheels
  test_wheels:
    name: Test wheels on ${{ matrix.os }} Python ${{ matrix.python }}
    needs: [build_wheels]
    runs-on: ${{ matrix.os }}
    continue-on-error: true  # Don't fail the workflow if tests fail
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python: ['3.8', '3.9', '3.10', '3.11', '3.12']
    
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python }}
      
      - uses: actions/download-artifact@v4
        with:
          path: dist/
      
      - name: Display downloaded artifacts
        shell: bash
        run: |
          echo "Downloaded artifacts:"
          ls -la dist/
          find dist/ -name "*.whl" -o -name "*.tar.gz"
      
      - name: Install wheel and test
        shell: bash
        run: |
          # Install pip and test dependencies
          python -m pip install --upgrade pip
          pip install pytest django djangorestframework psutil
          
          # Find the right wheel for this platform and Python version
          PYVER=$(python -c "import sys; print(f'cp{sys.version_info.major}{sys.version_info.minor}')")
          echo "Looking for wheel matching Python $PYVER on ${{ matrix.os }}"
          
          # Find and install matching wheel
          if [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
            WHEEL=$(find dist/ -name "*${PYVER}*linux*.whl" | head -1)
          elif [ "${{ matrix.os }}" == "macos-latest" ]; then
            WHEEL=$(find dist/ -name "*${PYVER}*macos*.whl" | head -1)
          elif [ "${{ matrix.os }}" == "windows-latest" ]; then
            WHEEL=$(find dist/ -name "*${PYVER}*win*.whl" | head -1)
          fi
          
          if [ -z "$WHEEL" ]; then
            echo "No matching wheel found, trying any wheel for this Python version"
            WHEEL=$(find dist/ -name "*${PYVER}*.whl" | head -1)
          fi
          
          if [ -z "$WHEEL" ]; then
            echo "No wheel found, installing from source"
            SDIST=$(find dist/ -name "*.tar.gz" | head -1)
            pip install "$SDIST"
          else
            echo "Installing wheel: $WHEEL"
            pip install "$WHEEL"
          fi
          
          # Test import and basic functionality
          python -c "
          import django_mercury
          print(f'Django Mercury version: {django_mercury.__version__}')
          
          from django_mercury.python_bindings.loader import get_implementation_info
          info = get_implementation_info()
          print(f'Implementation: {info}')
          
          # Test that we can create monitors
          from django_mercury.python_bindings.loader import get_performance_monitor
          Monitor = get_performance_monitor()
          monitor = Monitor()
          print(f'Monitor created: {monitor}')
          "
          
          # Run tests if they exist
          if [ -d "tests" ]; then
            pytest tests/test_c_extensions.py -v || true
          fi

  # Build status check
  check_build:
    name: Check build results
    needs: [build_sdist, build_wheels]  # No dependency on test_wheels
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: dist/
      
      - name: Check distributions
        run: |
          echo "Build artifacts:"
          find dist/ -type f -name "*.whl" -o -name "*.tar.gz" | sort
          
          # Count artifacts
          WHEEL_COUNT=$(find dist/ -name "*.whl" | wc -l)
          SDIST_COUNT=$(find dist/ -name "*.tar.gz" | wc -l)
          
          echo "Found $WHEEL_COUNT wheels and $SDIST_COUNT source distributions"
          
          # Check minimum expected artifacts
          if [ $WHEEL_COUNT -lt 5 ]; then
            echo "Warning: Expected at least 5 wheels, found $WHEEL_COUNT"
          fi
          
          if [ $SDIST_COUNT -ne 1 ]; then
            echo "Warning: Expected exactly 1 source distribution, found $SDIST_COUNT"
          fi

  # Publish to Test PyPI (manual trigger or tags)
  publish_test:
    name: Publish to Test PyPI
    needs: [check_build]
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.publish_to_test_pypi == 'true'
    
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: dist/
      
      - name: Flatten directory structure
        run: |
          mkdir upload/
          find dist/ -type f \( -name "*.whl" -o -name "*.tar.gz" \) -exec cp {} upload/ \;
          ls -la upload/
      
      - name: Publish to Test PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          packages-dir: upload/
          skip-existing: true

  # Publish to PyPI (only on version tags)
  publish:
    name: Publish to PyPI
    needs: [check_build]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: dist/
      
      - name: Flatten directory structure
        run: |
          mkdir upload/
          find dist/ -type f \( -name "*.whl" -o -name "*.tar.gz" \) -exec cp {} upload/ \;
          ls -la upload/
      
      - name: Check distributions
        run: |
          pip install twine
          twine check upload/*
      
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          packages-dir: upload/